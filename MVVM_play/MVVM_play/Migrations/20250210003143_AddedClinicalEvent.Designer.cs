// <auto-generated />
using System;
using MVVM_play.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MVVM_play.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20250210003143_AddedClinicalEvent")]
    partial class AddedClinicalEvent
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.1");

            modelBuilder.Entity("MVVM_play.Models.ClinicalEvent", b =>
                {
                    b.Property<long>("ClinicalEventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("clinical_event_id");

                    b.Property<string>("AccessionNbr")
                        .HasColumnType("varchar(20)")
                        .HasColumnName("accession_nbr");

                    b.Property<short>("AuthenticFlag")
                        .HasColumnType("INTEGER")
                        .HasColumnName("authentic_flag");

                    b.Property<long>("CatalogCd")
                        .HasColumnType("INTEGER")
                        .HasColumnName("catalog_cd");

                    b.Property<long>("CeDynamicLabelId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ce_dynamic_label_id");

                    b.Property<string>("ClinicalSeq")
                        .HasColumnType("varchar(40)")
                        .HasColumnName("clinical_seq");

                    b.Property<DateTime?>("ClinsigUpdtDtTm")
                        .HasColumnType("TEXT")
                        .HasColumnName("clinsig_updt_dt_tm");

                    b.Property<short?>("CluSubkey1Flag")
                        .HasColumnType("INTEGER")
                        .HasColumnName("clu_subkey1_flag");

                    b.Property<string>("CollatingSeq")
                        .HasColumnType("varchar(40)")
                        .HasColumnName("collating_seq");

                    b.Property<short>("ContributorSystemCd")
                        .HasColumnType("INTEGER")
                        .HasColumnName("contributor_system_cd");

                    b.Property<string>("CriticalHigh")
                        .HasColumnType("varchar(20)")
                        .HasColumnName("critical_high");

                    b.Property<string>("CriticalLow")
                        .HasColumnType("varchar(20)")
                        .HasColumnName("critical_low");

                    b.Property<string>("DeviceFreeTxt")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("device_free_txt");

                    b.Property<long>("EncntrFinancialId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("encntr_financial_id");

                    b.Property<long>("EncntrId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("encntr_id");

                    b.Property<long>("EntryModeCd")
                        .HasColumnType("INTEGER")
                        .HasColumnName("entry_mode_cd");

                    b.Property<long>("EventCd")
                        .HasColumnType("INTEGER")
                        .HasColumnName("event_cd");

                    b.Property<long>("EventClassCd")
                        .HasColumnType("INTEGER")
                        .HasColumnName("event_class_cd");

                    b.Property<DateTime>("EventEndDtTm")
                        .HasColumnType("TEXT")
                        .HasColumnName("event_end_dt_tm");

                    b.Property<decimal?>("EventEndDtTmOs")
                        .HasColumnType("TEXT")
                        .HasColumnName("event_end_dt_tm_os");

                    b.Property<int?>("EventEndTz")
                        .HasColumnType("INTEGER")
                        .HasColumnName("event_end_tz");

                    b.Property<long>("EventId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("event_id");

                    b.Property<long>("EventReltnCd")
                        .HasColumnType("INTEGER")
                        .HasColumnName("event_reltn_cd");

                    b.Property<DateTime?>("EventStartDtTm")
                        .HasColumnType("TEXT")
                        .HasColumnName("event_start_dt_tm");

                    b.Property<int?>("EventStartTz")
                        .HasColumnType("INTEGER")
                        .HasColumnName("event_start_tz");

                    b.Property<string>("EventTag")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("event_tag");

                    b.Property<short?>("EventTagSetFlag")
                        .HasColumnType("INTEGER")
                        .HasColumnName("event_tag_set_flag");

                    b.Property<string>("EventTitleText")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("event_title_text");

                    b.Property<DateTime?>("ExpirationDtTm")
                        .HasColumnType("TEXT")
                        .HasColumnName("expiration_dt_tm");

                    b.Property<long>("InquireSecurityCd")
                        .HasColumnType("INTEGER")
                        .HasColumnName("inquire_security_cd");

                    b.Property<long?>("InstId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("inst_id");

                    b.Property<long>("ModifierLongTextId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("modifier_long_text_id");

                    b.Property<short?>("NomenStringFlag")
                        .HasColumnType("INTEGER")
                        .HasColumnName("nomen_string_flag");

                    b.Property<string>("NormalHigh")
                        .HasColumnType("varchar(20)")
                        .HasColumnName("normal_high");

                    b.Property<string>("NormalLow")
                        .HasColumnType("varchar(20)")
                        .HasColumnName("normal_low");

                    b.Property<string>("NormalRefRangeTxt")
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("normal_ref_range_txt");

                    b.Property<long>("NormalcyCd")
                        .HasColumnType("INTEGER")
                        .HasColumnName("normalcy_cd");

                    b.Property<long>("NormalcyMethodCd")
                        .HasColumnType("INTEGER")
                        .HasColumnName("normalcy_method_cd");

                    b.Property<long?>("NoteImportanceBitMap")
                        .HasColumnType("INTEGER")
                        .HasColumnName("note_importance_bit_map");

                    b.Property<long>("OrderActionSequence")
                        .HasColumnType("INTEGER")
                        .HasColumnName("order_action_sequence");

                    b.Property<long>("OrderId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("order_id");

                    b.Property<long>("ParentEventId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("parent_event_id");

                    b.Property<DateTime>("PerformedDtTm")
                        .HasColumnType("TEXT")
                        .HasColumnName("performed_dt_tm");

                    b.Property<long>("PerformedPrsnlId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("performed_prsnl_id");

                    b.Property<int?>("PerformedTz")
                        .HasColumnType("INTEGER")
                        .HasColumnName("performed_tz");

                    b.Property<long>("PersonId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("person_id");

                    b.Property<short>("PublishFlag")
                        .HasColumnType("INTEGER")
                        .HasColumnName("publish_flag");

                    b.Property<long>("QcReviewCd")
                        .HasColumnType("INTEGER")
                        .HasColumnName("qc_review_cd");

                    b.Property<long>("RecordStatusCd")
                        .HasColumnType("INTEGER")
                        .HasColumnName("record_status_cd");

                    b.Property<string>("ReferenceNbr")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("reference_nbr");

                    b.Property<long?>("ResourceCd")
                        .HasColumnType("INTEGER")
                        .HasColumnName("resource_cd");

                    b.Property<long?>("ResourceGroupCd")
                        .HasColumnType("INTEGER")
                        .HasColumnName("resource_group_cd");

                    b.Property<long>("ResultStatusCd")
                        .HasColumnType("INTEGER")
                        .HasColumnName("result_status_cd");

                    b.Property<long?>("ResultTimeUnitsCd")
                        .HasColumnType("INTEGER")
                        .HasColumnName("result_time_units_cd");

                    b.Property<long?>("ResultUnitsCd")
                        .HasColumnType("INTEGER")
                        .HasColumnName("result_units_cd");

                    b.Property<string>("ResultVal")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("result_val");

                    b.Property<string>("SeriesRefNbr")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("series_ref_nbr");

                    b.Property<long?>("SourceCd")
                        .HasColumnType("INTEGER")
                        .HasColumnName("source_cd");

                    b.Property<DateTime?>("SrcClinsigUpdtDtTm")
                        .HasColumnType("TEXT")
                        .HasColumnName("src_clinsig_updt_dt_tm");

                    b.Property<long>("SrcEventId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("src_event_id");

                    b.Property<int?>("SubtableBitMap")
                        .HasColumnType("INTEGER")
                        .HasColumnName("subtable_bit_map");

                    b.Property<long?>("TaskAssayCd")
                        .HasColumnType("INTEGER")
                        .HasColumnName("task_assay_cd");

                    b.Property<long?>("TaskAssayVersionNbr")
                        .HasColumnType("INTEGER")
                        .HasColumnName("task_assay_version_nbr");

                    b.Property<long>("UpdtApplctx")
                        .HasColumnType("INTEGER")
                        .HasColumnName("updt_applctx");

                    b.Property<int>("UpdtCnt")
                        .HasColumnType("INTEGER")
                        .HasColumnName("updt_cnt");

                    b.Property<DateTime>("UpdtDtTm")
                        .HasColumnType("TEXT")
                        .HasColumnName("updt_dt_tm");

                    b.Property<long>("UpdtId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("updt_id");

                    b.Property<int>("UpdtTask")
                        .HasColumnType("INTEGER")
                        .HasColumnName("updt_task");

                    b.Property<DateTime>("ValidFromDtTm")
                        .HasColumnType("TEXT")
                        .HasColumnName("valid_from_dt_tm");

                    b.Property<DateTime>("ValidUntilDtTm")
                        .HasColumnType("TEXT")
                        .HasColumnName("valid_until_dt_tm");

                    b.Property<DateTime?>("VerifiedDtTm")
                        .HasColumnType("TEXT")
                        .HasColumnName("verified_dt_tm");

                    b.Property<long>("VerifiedPrsnlId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("verified_prsnl_id");

                    b.Property<int?>("ViewLevel")
                        .HasColumnType("INTEGER")
                        .HasColumnName("view_level");

                    b.HasKey("ClinicalEventId");

                    b.HasIndex(new[] { "CeDynamicLabelId", "ValidUntilDtTm" }, "ix_ce_dynamic_label_id_valid_until");

                    b.HasIndex(new[] { "EncntrId", "ClinsigUpdtDtTm" }, "ix_encntr_id_clinsig_updt_dttm");

                    b.HasIndex(new[] { "EncntrId", "EventClassCd" }, "ix_encntr_id_event_class_cd");

                    b.HasIndex(new[] { "EncntrId", "ResultStatusCd" }, "ix_encntr_id_result_status");

                    b.HasIndex(new[] { "EventCd", "EventEndDtTm" }, "ix_event_cd_event_end_dt_tm");

                    b.HasIndex(new[] { "EventId", "ValidUntilDtTm" }, "ix_event_id_validate_until");

                    b.HasIndex(new[] { "OrderId", "ValidFromDtTm" }, "ix_order_id_valid_from");

                    b.HasIndex(new[] { "ParentEventId", "ValidUntilDtTm" }, "ix_parent_event_id_valid_until");

                    b.HasIndex(new[] { "PerformedDtTm", "EventCd" }, "ix_performed_dttm_event_cd");

                    b.HasIndex(new[] { "PersonId", "EventCd", "ClinsigUpdtDtTm", "ValidUntilDtTm" }, "ix_person_id_event_cd_valid_until");

                    b.HasIndex(new[] { "PersonId", "UpdtDtTm" }, "ix_person_id_updat_dttm");

                    b.HasIndex(new[] { "PersonId", "ValidFromDtTm" }, "ix_person_id_valid_from");

                    b.HasIndex(new[] { "PersonId", "EventCd", "EventEndDtTm", "ValidUntilDtTm" }, "ix_personid_event_cd_event_end_dttm_valid_until");

                    b.HasIndex(new[] { "PersonId", "EventEndDtTm", "ValidUntilDtTm", "EncntrId", "ResultStatusCd", "PerformedPrsnlId" }, "ix_personid_event_end_dttm_valid_encntrid");

                    b.HasIndex(new[] { "ReferenceNbr", "ValidFromDtTm", "ContributorSystemCd" }, "ix_ref_num_validate_dttm_contrib");

                    b.HasIndex(new[] { "SeriesRefNbr" }, "ix_series_ref_nbr");

                    b.HasIndex(new[] { "SrcEventId", "ValidUntilDtTm" }, "ix_src_event_id_valid_until");

                    b.ToTable("clinical_event");
                });

            modelBuilder.Entity("MVVM_play.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Age")
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateDateTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MVVM_play.Models.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .HasColumnType("TEXT");

                    b.Property<string>("PrimaryAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("SecondaryAddress")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateDateTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("MVVM_play.Models.UserProfileHx", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PrimaryAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("SecondaryAddress")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateDateTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserProfilesHx");
                });

            modelBuilder.Entity("MVVM_play.Models.UserProfile", b =>
                {
                    b.HasOne("MVVM_play.Models.User", "User")
                        .WithOne("UserProfile")
                        .HasForeignKey("MVVM_play.Models.UserProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MVVM_play.Models.UserProfileHx", b =>
                {
                    b.HasOne("MVVM_play.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MVVM_play.Models.User", b =>
                {
                    b.Navigation("UserProfile");
                });
#pragma warning restore 612, 618
        }
    }
}
