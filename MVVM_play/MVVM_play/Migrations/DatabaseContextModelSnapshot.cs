// <auto-generated />
using System;
using MVVM_play.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MVVM_play.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MVVM_play.Models.ClinicalEvent", b =>
                {
                    b.Property<long>("ClinicalEventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ClinicalEventId"));

                    b.Property<string>("AccessionNbr")
                        .HasColumnType("text");

                    b.Property<short>("AuthenticFlag")
                        .HasColumnType("smallint");

                    b.Property<long>("CatalogCd")
                        .HasColumnType("bigint");

                    b.Property<long>("CeDynamicLabelId")
                        .HasColumnType("bigint");

                    b.Property<string>("ClinicalSeq")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ClinsigUpdtDtTm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<short?>("CluSubkey1Flag")
                        .HasColumnType("smallint");

                    b.Property<string>("CollatingSeq")
                        .HasColumnType("text");

                    b.Property<short>("ContributorSystemCd")
                        .HasColumnType("smallint");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CriticalHigh")
                        .HasColumnType("text");

                    b.Property<string>("CriticalLow")
                        .HasColumnType("text");

                    b.Property<string>("DeviceFreeTxt")
                        .HasColumnType("text");

                    b.Property<long>("EncntrFinancialId")
                        .HasColumnType("bigint");

                    b.Property<long>("EncntrId")
                        .HasColumnType("bigint");

                    b.Property<long>("EntryModeCd")
                        .HasColumnType("bigint");

                    b.Property<long>("EventCd")
                        .HasColumnType("bigint");

                    b.Property<long>("EventClassCd")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("EventEndDtTm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("EventEndDtTmOs")
                        .HasColumnType("numeric");

                    b.Property<int?>("EventEndTz")
                        .HasColumnType("integer");

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<long>("EventReltnCd")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("EventStartDtTm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("EventStartTz")
                        .HasColumnType("integer");

                    b.Property<string>("EventTag")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short?>("EventTagSetFlag")
                        .HasColumnType("smallint");

                    b.Property<string>("EventTitleText")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ExpirationDtTm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("InquireSecurityCd")
                        .HasColumnType("bigint");

                    b.Property<long?>("InstId")
                        .HasColumnType("bigint");

                    b.Property<long>("ModifierLongTextId")
                        .HasColumnType("bigint");

                    b.Property<short?>("NomenStringFlag")
                        .HasColumnType("smallint");

                    b.Property<string>("NormalHigh")
                        .HasColumnType("text");

                    b.Property<string>("NormalLow")
                        .HasColumnType("text");

                    b.Property<string>("NormalRefRangeTxt")
                        .HasColumnType("text");

                    b.Property<long>("NormalcyCd")
                        .HasColumnType("bigint");

                    b.Property<long>("NormalcyMethodCd")
                        .HasColumnType("bigint");

                    b.Property<long?>("NoteImportanceBitMap")
                        .HasColumnType("bigint");

                    b.Property<long>("OrderActionSequence")
                        .HasColumnType("bigint");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<long>("ParentEventId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("PerformedDtTm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("PerformedPrsnlId")
                        .HasColumnType("bigint");

                    b.Property<int?>("PerformedTz")
                        .HasColumnType("integer");

                    b.Property<long>("PersonId")
                        .HasColumnType("bigint");

                    b.Property<short>("PublishFlag")
                        .HasColumnType("smallint");

                    b.Property<long>("QcReviewCd")
                        .HasColumnType("bigint");

                    b.Property<long>("RecordStatusCd")
                        .HasColumnType("bigint");

                    b.Property<string>("ReferenceNbr")
                        .HasColumnType("text");

                    b.Property<long?>("ResourceCd")
                        .HasColumnType("bigint");

                    b.Property<long?>("ResourceGroupCd")
                        .HasColumnType("bigint");

                    b.Property<long>("ResultStatusCd")
                        .HasColumnType("bigint");

                    b.Property<long?>("ResultTimeUnitsCd")
                        .HasColumnType("bigint");

                    b.Property<long?>("ResultUnitsCd")
                        .HasColumnType("bigint");

                    b.Property<string>("ResultVal")
                        .HasColumnType("text");

                    b.Property<string>("SeriesRefNbr")
                        .HasColumnType("text");

                    b.Property<long?>("SourceCd")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("SrcClinsigUpdtDtTm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("SrcEventId")
                        .HasColumnType("bigint");

                    b.Property<int?>("SubtableBitMap")
                        .HasColumnType("integer");

                    b.Property<long?>("TaskAssayCd")
                        .HasColumnType("bigint");

                    b.Property<long?>("TaskAssayVersionNbr")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ValidFromDtTm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ValidUntilDtTm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("VerifiedDtTm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("VerifiedPrsnlId")
                        .HasColumnType("bigint");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<int?>("ViewLevel")
                        .HasColumnType("integer");

                    b.HasKey("ClinicalEventId");

                    b.HasIndex(new[] { "CeDynamicLabelId", "ValidUntilDtTm" }, "ix_ce_dynamic_label_id_valid_until");

                    b.HasIndex(new[] { "EncntrId", "ClinsigUpdtDtTm" }, "ix_encntr_id_clinsig_updt_dttm");

                    b.HasIndex(new[] { "EncntrId", "EventClassCd" }, "ix_encntr_id_event_class_cd");

                    b.HasIndex(new[] { "EncntrId", "ResultStatusCd" }, "ix_encntr_id_result_status");

                    b.HasIndex(new[] { "EventCd", "EventEndDtTm" }, "ix_event_cd_event_end_dt_tm");

                    b.HasIndex(new[] { "EventId", "ValidUntilDtTm" }, "ix_event_id_validate_until");

                    b.HasIndex(new[] { "OrderId", "ValidFromDtTm" }, "ix_order_id_valid_from");

                    b.HasIndex(new[] { "ParentEventId", "ValidUntilDtTm" }, "ix_parent_event_id_valid_until");

                    b.HasIndex(new[] { "PerformedDtTm", "EventCd" }, "ix_performed_dttm_event_cd");

                    b.HasIndex(new[] { "PersonId", "EventCd", "ClinsigUpdtDtTm", "ValidUntilDtTm" }, "ix_person_id_event_cd_valid_until");

                    b.HasIndex(new[] { "PersonId", "UpdatedDateTime" }, "ix_person_id_updat_dttm");

                    b.HasIndex(new[] { "PersonId", "ValidFromDtTm" }, "ix_person_id_valid_from");

                    b.HasIndex(new[] { "PersonId", "EventCd", "EventEndDtTm", "ValidUntilDtTm" }, "ix_personid_event_cd_event_end_dttm_valid_until");

                    b.HasIndex(new[] { "PersonId", "EventEndDtTm", "ValidUntilDtTm", "EncntrId", "ResultStatusCd", "PerformedPrsnlId" }, "ix_personid_event_end_dttm_valid_encntrid");

                    b.HasIndex(new[] { "ReferenceNbr", "ValidFromDtTm", "ContributorSystemCd" }, "ix_ref_num_validate_dttm_contrib");

                    b.HasIndex(new[] { "SeriesRefNbr" }, "ix_series_ref_nbr");

                    b.HasIndex(new[] { "SrcEventId", "ValidUntilDtTm" }, "ix_src_event_id_valid_until");

                    b.ToTable("ClinicalEvent");
                });

            modelBuilder.Entity("MVVM_play.Models.CodeValue", b =>
                {
                    b.Property<long>("CodeValueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("CodeValueId"));

                    b.Property<bool>("ActiveInd")
                        .HasColumnType("boolean");

                    b.Property<long?>("ActiveStatusPrsnlId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ActiveTypeCd")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("BeginEffectiveDtTm")
                        .HasColumnType("timestamp");

                    b.Property<string>("Cki")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("CodeSet")
                        .HasColumnType("integer");

                    b.Property<int>("CollationSeq")
                        .HasColumnType("integer");

                    b.Property<string>("ConceptCki")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("DataStatusCd")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DataStatusDtTm")
                        .HasColumnType("timestamp");

                    b.Property<long?>("DataStatusPrsnlId")
                        .HasColumnType("bigint");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<string>("Display")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("DisplayKey")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<DateTime>("EndEffectiveDtTm")
                        .HasColumnType("timestamp");

                    b.Property<DateTime?>("InactiveDtTm")
                        .HasColumnType("timestamp");

                    b.Property<long>("InstId")
                        .HasColumnType("bigint");

                    b.Property<string>("Meaning")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("CodeValueId");

                    b.ToTable("CodeValue");
                });

            modelBuilder.Entity("MVVM_play.Models.CodeValueSet", b =>
                {
                    b.Property<long>("CodeSet")
                        .HasColumnType("bigint");

                    b.Property<bool>("ActiveInd")
                        .HasColumnType("boolean");

                    b.Property<bool>("AddAccessInd")
                        .HasColumnType("boolean");

                    b.Property<bool>("AliasDupInd")
                        .HasColumnType("boolean");

                    b.Property<bool>("CacheInd")
                        .HasColumnType("boolean");

                    b.Property<bool>("ChangeAccessInd")
                        .HasColumnType("boolean");

                    b.Property<int?>("CodeSetHits")
                        .HasColumnType("integer");

                    b.Property<int>("CodeValueCnt")
                        .HasColumnType("integer");

                    b.Property<string>("Contributor")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Definition")
                        .HasColumnType("text");

                    b.Property<bool>("DefinitionDupInd")
                        .HasColumnType("boolean");

                    b.Property<bool>("DelAccessInd")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Display")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("DisplayDupInd")
                        .HasColumnType("boolean");

                    b.Property<string>("DisplayKey")
                        .HasColumnType("text");

                    b.Property<bool>("DisplayKeyDupInd")
                        .HasColumnType("boolean");

                    b.Property<int>("DomainCodeSet")
                        .HasColumnType("integer");

                    b.Property<bool>("DomainQualifierInd")
                        .HasColumnType("boolean");

                    b.Property<bool>("ExtensionInd")
                        .HasColumnType("boolean");

                    b.Property<bool>("InqAccessInd")
                        .HasColumnType("boolean");

                    b.Property<long>("InstId")
                        .HasColumnType("bigint");

                    b.Property<bool>("MeaningDupInd")
                        .HasColumnType("boolean");

                    b.Property<string>("OwnerModule")
                        .HasColumnType("text");

                    b.Property<string>("TableName")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("CodeSet");

                    b.HasIndex("CodeSet")
                        .IsUnique();

                    b.ToTable("CodeValueSet");
                });

            modelBuilder.Entity("MVVM_play.Models.Order", b =>
                {
                    b.Property<long>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OrderId"));

                    b.Property<bool>("ActiveInd")
                        .HasColumnType("boolean");

                    b.Property<long>("ActiveStatusCd")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ActiveStatusDtTm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("ActiveStatusPrsnlId")
                        .HasColumnType("bigint");

                    b.Property<long>("ActivityTypeCd")
                        .HasColumnType("bigint");

                    b.Property<short>("AdHocOrderFlag")
                        .HasColumnType("smallint");

                    b.Property<long>("CatalogCd")
                        .HasColumnType("bigint");

                    b.Property<long>("CatalogTypeCd")
                        .HasColumnType("bigint");

                    b.Property<string>("Cki")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("ClinRelevantUpdtDtTm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ClinRelevantUpdtTz")
                        .HasColumnType("integer");

                    b.Property<string>("ClinicalDisplayLine")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<short>("CluSubkeyFlag")
                        .HasColumnType("smallint");

                    b.Property<int>("CommentTypeMask")
                        .HasColumnType("integer");

                    b.Property<bool>("ConstantInd")
                        .HasColumnType("boolean");

                    b.Property<long>("ContributorSystemCd")
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<short?>("CsFlag")
                        .HasColumnType("smallint");

                    b.Property<long>("CsOrderId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CurrentStartDtTm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CurrentStartTz")
                        .HasColumnType("integer");

                    b.Property<int>("DayOfTreatmentSequence")
                        .HasColumnType("integer");

                    b.Property<long>("DcpClinCatCd")
                        .HasColumnType("bigint");

                    b.Property<string>("DeptMiscLine")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<long?>("DeptStatusCd")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DiscontinueEffectiveDtTm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DiscontinueEffectiveTz")
                        .HasColumnType("integer");

                    b.Property<bool>("DiscontinueInd")
                        .HasColumnType("boolean");

                    b.Property<long?>("DiscontinueTypeCd")
                        .HasColumnType("bigint");

                    b.Property<short?>("DosingMethodFlag")
                        .HasColumnType("smallint");

                    b.Property<long>("EncntrId")
                        .HasColumnType("bigint");

                    b.Property<long?>("EncounterFinancialId")
                        .HasColumnType("bigint");

                    b.Property<bool>("EsoNewOrderInd")
                        .HasColumnType("boolean");

                    b.Property<long?>("FormularyStatusCd")
                        .HasColumnType("bigint");

                    b.Property<short>("FreqTypeFlag")
                        .HasColumnType("smallint");

                    b.Property<long>("FrequencyId")
                        .HasColumnType("bigint");

                    b.Property<long?>("FutureLocationFacilityCd")
                        .HasColumnType("bigint");

                    b.Property<long?>("FutureLocationNurseUnitCd")
                        .HasColumnType("bigint");

                    b.Property<short?>("GroupOrderFlag")
                        .HasColumnType("smallint");

                    b.Property<long>("GroupOrderId")
                        .HasColumnType("bigint");

                    b.Property<short>("HideFlag")
                        .HasColumnType("smallint");

                    b.Property<string>("HnaOrderMnemonic")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool?>("IVInd")
                        .HasColumnType("boolean");

                    b.Property<bool>("IncompleteOrderInd")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IngredientInd")
                        .HasColumnType("boolean");

                    b.Property<long?>("InstId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IntervalInd")
                        .HasColumnType("boolean");

                    b.Property<long>("IvSetSynonymId")
                        .HasColumnType("bigint");

                    b.Property<int>("LastActionSequence")
                        .HasColumnType("integer");

                    b.Property<int?>("LastCoreActionSequence")
                        .HasColumnType("integer");

                    b.Property<int?>("LastIngredActionSequence")
                        .HasColumnType("integer");

                    b.Property<long?>("LastUpdateProviderId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LatestCommunicationTypeCd")
                        .HasColumnType("bigint");

                    b.Property<long?>("LinkNbr")
                        .HasColumnType("bigint");

                    b.Property<short?>("LinkOrderFlag")
                        .HasColumnType("smallint");

                    b.Property<long?>("LinkOrderId")
                        .HasColumnType("bigint");

                    b.Property<short?>("LinkTypeFlag")
                        .HasColumnType("smallint");

                    b.Property<long?>("MedOrderTypeCd")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedStartDtTm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("NeedDoctorCosignInd")
                        .HasColumnType("boolean");

                    b.Property<bool>("NeedNurseReviewInd")
                        .HasColumnType("boolean");

                    b.Property<bool>("NeedPhysicianValidateInd")
                        .HasColumnType("boolean");

                    b.Property<short>("NeedRxClinReviewFlag")
                        .HasColumnType("smallint");

                    b.Property<short>("NeedRxVerifyFlag")
                        .HasColumnType("smallint");

                    b.Property<long>("OeFormatId")
                        .HasColumnType("bigint");

                    b.Property<bool>("OrderCommentInd")
                        .HasColumnType("boolean");

                    b.Property<string>("OrderDetailDisplayLine")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("OrderMnemonic")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<long>("OrderStatusCd")
                        .HasColumnType("bigint");

                    b.Property<int?>("OrderStatusReasonBit")
                        .HasColumnType("integer");

                    b.Property<short>("OrderableTypeFlag")
                        .HasColumnType("smallint");

                    b.Property<string>("OrderedAsMnemonic")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<short?>("OrigOrderAsFlag")
                        .HasColumnType("smallint");

                    b.Property<int?>("OrigOrderConvsSeq")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("OrigOrderDtTm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("OrigOrderTz")
                        .HasColumnType("integer");

                    b.Property<long?>("OriginatingEncntrId")
                        .HasColumnType("bigint");

                    b.Property<short?>("OverrideFlag")
                        .HasColumnType("smallint");

                    b.Property<long>("PathwayCatalogId")
                        .HasColumnType("bigint");

                    b.Property<long>("PersonId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PrescriptionGroupValue")
                        .HasColumnType("bigint");

                    b.Property<long?>("PrescriptionOrderId")
                        .HasColumnType("bigint");

                    b.Property<bool>("PrnInd")
                        .HasColumnType("boolean");

                    b.Property<long?>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ProjectedStopDtTm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ProjectedStopTz")
                        .HasColumnType("integer");

                    b.Property<long?>("ProtocolOrderId")
                        .HasColumnType("bigint");

                    b.Property<int?>("RefTextMask")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ResumeEffectiveDtTm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ResumeEffectiveTz")
                        .HasColumnType("integer");

                    b.Property<bool?>("ResumeInd")
                        .HasColumnType("boolean");

                    b.Property<int?>("RxMask")
                        .HasColumnType("integer");

                    b.Property<long?>("SchStateCd")
                        .HasColumnType("bigint");

                    b.Property<string>("SimplifiedDisplayLine")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime?>("SoftStopDtTm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("SoftStopTz")
                        .HasColumnType("integer");

                    b.Property<long?>("SourceCd")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StatusDtTm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("StatusPrsnlId")
                        .HasColumnType("bigint");

                    b.Property<long?>("StopTypeCd")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("SuspendEffectiveDtTm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("SuspendEffectiveTz")
                        .HasColumnType("integer");

                    b.Property<bool?>("SuspendInd")
                        .HasColumnType("boolean");

                    b.Property<long?>("SynonymId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TemplateCoreActionSequence")
                        .HasColumnType("integer");

                    b.Property<int?>("TemplateDoseSequence")
                        .HasColumnType("integer");

                    b.Property<short?>("TemplateOrderFlag")
                        .HasColumnType("smallint");

                    b.Property<long>("TemplateOrderId")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<bool>("VettingApprovalFlag")
                        .HasColumnType("boolean");

                    b.HasKey("OrderId");

                    b.HasIndex(new[] { "EncntrId", "CatalogTypeCd", "CatalogCd" }, "ix_encntr_catalogtype_catalog");

                    b.HasIndex(new[] { "OrderStatusCd", "StatusDtTm" }, "ix_orderstatus_statusdttm");

                    b.HasIndex(new[] { "OrigOrderDtTm", "ProductId", "OrderStatusCd", "ActivityTypeCd", "SynonymId" }, "ix_origdttm_prodid_status_etc");

                    b.HasIndex(new[] { "PersonId", "CatalogCd" }, "ix_person_catalog");

                    b.HasIndex(new[] { "PersonId", "CatalogTypeCd" }, "ix_person_catalogtype");

                    b.HasIndex(new[] { "PersonId", "CurrentStartDtTm", "TemplateOrderFlag", "CatalogTypeCd" }, "ix_person_curstart_tflag_catalogtype");

                    b.HasIndex(new[] { "PersonId", "EncntrId", "HideFlag", "CurrentStartDtTm", "ProjectedStopDtTm" }, "ix_person_encntr_start_projstop");

                    b.HasIndex(new[] { "PersonId", "OrderStatusCd", "CatalogTypeCd" }, "ix_person_orderstatus_catalogtype");

                    b.HasIndex(new[] { "PersonId", "OrderStatusCd", "TemplateOrderFlag" }, "ix_person_ordestatus_tflag");

                    b.HasIndex(new[] { "PersonId", "ProjectedStopDtTm", "CatalogTypeCd", "TemplateOrderFlag", "EncntrId" }, "ix_person_projstop_catalogtype_encntr");

                    b.HasIndex(new[] { "PersonId", "UpdatedDateTime" }, "ix_person_updtdttm");

                    b.HasIndex(new[] { "NeedRxVerifyFlag", "ActivityTypeCd", "CatalogTypeCd", "EncntrId" }, "ix_rxverify_acttype_catalogtype_encntr");

                    b.HasIndex(new[] { "UpdatedDateTime", "OrderId" }, "ix_updtdttm_orderid");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("MVVM_play.Models.OrderAction", b =>
                {
                    b.Property<long>("OrderActionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OrderActionId"));

                    b.Property<DateTime?>("ActionDtTm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ActionInitiatedDtTm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("ActionPersonnelId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ActionQualifierCd")
                        .HasColumnType("bigint");

                    b.Property<bool?>("ActionRejectedInd")
                        .HasColumnType("boolean");

                    b.Property<int>("ActionSequence")
                        .HasColumnType("integer");

                    b.Property<long>("ActionTypeCd")
                        .HasColumnType("bigint");

                    b.Property<int?>("ActionTz")
                        .HasColumnType("integer");

                    b.Property<short?>("BillingProviderFlag")
                        .HasColumnType("smallint");

                    b.Property<string>("ClinicalDisplayLine")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<long?>("CommunicationTypeCd")
                        .HasColumnType("bigint");

                    b.Property<bool?>("ConstantInd")
                        .HasColumnType("boolean");

                    b.Property<long?>("ContributorSystemCd")
                        .HasColumnType("bigint");

                    b.Property<bool?>("CoreInd")
                        .HasColumnType("boolean");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CurrentStartDtTm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CurrentStartTz")
                        .HasColumnType("integer");

                    b.Property<long?>("DeptStatusCd")
                        .HasColumnType("bigint");

                    b.Property<string>("DigitalSignatureIdent")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTime>("EffectiveDtTm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("EffectiveTz")
                        .HasColumnType("integer");

                    b.Property<long?>("EsoActionCd")
                        .HasColumnType("bigint");

                    b.Property<long?>("FormularyStatusCd")
                        .HasColumnType("bigint");

                    b.Property<long>("FrequencyId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IncompleteOrderInd")
                        .HasColumnType("boolean");

                    b.Property<bool?>("MedstudentActionInd")
                        .HasColumnType("boolean");

                    b.Property<bool>("NeedClinReviewFlag")
                        .HasColumnType("boolean");

                    b.Property<bool>("NeedsVerifyInd")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("NextDoseDtTm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("OrderAppNbr")
                        .HasColumnType("integer");

                    b.Property<long?>("OrderConversationId")
                        .HasColumnType("bigint");

                    b.Property<int?>("OrderConvsSeq")
                        .HasColumnType("integer");

                    b.Property<string>("OrderDetailDisplayLine")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("OrderDtTm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<long?>("OrderLocnCd")
                        .HasColumnType("bigint");

                    b.Property<long?>("OrderProviderId")
                        .HasColumnType("bigint");

                    b.Property<int?>("OrderReviewStatusReasonBit")
                        .HasColumnType("integer");

                    b.Property<int?>("OrderSchedulePrecisionBit")
                        .HasColumnType("integer");

                    b.Property<long>("OrderStatusCd")
                        .HasColumnType("bigint");

                    b.Property<int?>("OrderStatusReasonBit")
                        .HasColumnType("integer");

                    b.Property<int?>("OrderTz")
                        .HasColumnType("integer");

                    b.Property<bool?>("PrnInd")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ProjectedStopDtTm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ProjectedStopTz")
                        .HasColumnType("integer");

                    b.Property<long?>("SchStateCd")
                        .HasColumnType("bigint");

                    b.Property<string>("SimplifiedDisplayLine")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("SourceDotActionSeq")
                        .HasColumnType("integer");

                    b.Property<long?>("SourceDotOrderId")
                        .HasColumnType("bigint");

                    b.Property<int?>("SourceProtocolActionSeq")
                        .HasColumnType("integer");

                    b.Property<int?>("StartRangeNbr")
                        .HasColumnType("integer");

                    b.Property<short?>("StartRangeUnitFlag")
                        .HasColumnType("smallint");

                    b.Property<long?>("StopTypeCd")
                        .HasColumnType("bigint");

                    b.Property<long?>("SupervisingProviderId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SynonymId")
                        .HasColumnType("bigint");

                    b.Property<short>("TemplateOrderFlag")
                        .HasColumnType("smallint");

                    b.Property<long?>("UndoActionTypeCd")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ValidDoseDtTm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("OrderActionId");

                    b.HasIndex(new[] { "OrderId", "ActionSequence" }, "ix_orderid_actionseq");

                    b.HasIndex(new[] { "OrderProviderId", "ActionDtTm", "ActionSequence" }, "ix_provider_actiondttm_actionseq");

                    b.HasIndex(new[] { "ActionPersonnelId", "ActionDtTm", "ActionSequence" }, "ix_prsnl_actiondttm_actionseq");

                    b.ToTable("OrderAction");
                });

            modelBuilder.Entity("MVVM_play.Models.OrderCatalog", b =>
                {
                    b.Property<long>("CatalogCd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("CatalogCd"));

                    b.Property<bool?>("AbnReviewInd")
                        .HasColumnType("boolean");

                    b.Property<bool>("ActiveInd")
                        .HasColumnType("boolean");

                    b.Property<long>("ActivitySubtypeCd")
                        .HasColumnType("bigint");

                    b.Property<long>("ActivityTypeCd")
                        .HasColumnType("bigint");

                    b.Property<bool>("AutoCancelInd")
                        .HasColumnType("boolean");

                    b.Property<bool>("BillOnlyInd")
                        .HasColumnType("boolean");

                    b.Property<long>("CatalogTypeCd")
                        .HasColumnType("bigint");

                    b.Property<string>("Cki")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<short?>("CommentTemplateFlag")
                        .HasColumnType("smallint");

                    b.Property<bool>("CompleteUponOrderInd")
                        .HasColumnType("boolean");

                    b.Property<string>("ConceptCki")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<long?>("ConsentFormFormatCd")
                        .HasColumnType("bigint");

                    b.Property<bool>("ConsentFormInd")
                        .HasColumnType("boolean");

                    b.Property<long?>("ConsentFormRoutingCd")
                        .HasColumnType("bigint");

                    b.Property<short>("ContOrderMethodFlag")
                        .HasColumnType("smallint");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DcDisplayDays")
                        .HasColumnType("integer");

                    b.Property<int>("DcInteractionDays")
                        .HasColumnType("integer");

                    b.Property<long>("DcpClinCatCd")
                        .HasColumnType("bigint");

                    b.Property<string>("DeptDisplayName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("DeptDupCheckInd")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("DisableOrderCommentInd")
                        .HasColumnType("boolean");

                    b.Property<bool>("DiscernAutoVerifyFlag")
                        .HasColumnType("boolean");

                    b.Property<int?>("DosingActIngredCode")
                        .HasColumnType("integer");

                    b.Property<bool?>("DosingAllIngredInd")
                        .HasColumnType("boolean");

                    b.Property<bool>("DupCheckInd")
                        .HasColumnType("boolean");

                    b.Property<long>("EventCd")
                        .HasColumnType("bigint");

                    b.Property<long>("FormId")
                        .HasColumnType("bigint");

                    b.Property<short?>("FormLevel")
                        .HasColumnType("smallint");

                    b.Property<long?>("InstId")
                        .HasColumnType("bigint");

                    b.Property<bool>("InstRestrictionInd")
                        .HasColumnType("boolean");

                    b.Property<int>("ModifiableFlag")
                        .HasColumnType("integer");

                    b.Property<long>("OeFormatId")
                        .HasColumnType("bigint");

                    b.Property<int>("OpDcDisplayDays")
                        .HasColumnType("integer");

                    b.Property<int>("OpDcInteractionDays")
                        .HasColumnType("integer");

                    b.Property<long>("OrdComTemplateLongTextId")
                        .HasColumnType("bigint");

                    b.Property<bool>("OrderReviewInd")
                        .HasColumnType("boolean");

                    b.Property<int>("OrderableTypeFlag")
                        .HasColumnType("integer");

                    b.Property<int?>("PrepInfoFlag")
                        .HasColumnType("integer");

                    b.Property<string>("PrimaryMnemonic")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("PrintReqInd")
                        .HasColumnType("boolean");

                    b.Property<bool>("PromptInd")
                        .HasColumnType("boolean");

                    b.Property<bool>("QuickChartInd")
                        .HasColumnType("boolean");

                    b.Property<int?>("RefTextMask")
                        .HasColumnType("integer");

                    b.Property<long>("RequisitionFormatCd")
                        .HasColumnType("bigint");

                    b.Property<long>("RequisitionRoutingCd")
                        .HasColumnType("bigint");

                    b.Property<long>("ResourceRouteCd")
                        .HasColumnType("bigint");

                    b.Property<int?>("ResourceRouteLvl")
                        .HasColumnType("integer");

                    b.Property<long>("ReviewHierarchyId")
                        .HasColumnType("bigint");

                    b.Property<bool>("ScheduleInd")
                        .HasColumnType("boolean");

                    b.Property<string>("SourceVocabIdent")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("SourceVocabMean")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)");

                    b.Property<int>("StopDuration")
                        .HasColumnType("integer");

                    b.Property<long>("StopDurationUnitCd")
                        .HasColumnType("bigint");

                    b.Property<long>("StopTypeCd")
                        .HasColumnType("bigint");

                    b.Property<string>("TxnIdText")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UpdtApplctx")
                        .HasColumnType("bigint");

                    b.Property<int>("UpdtCnt")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdtDtTm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UpdtId")
                        .HasColumnType("bigint");

                    b.Property<int>("UpdtTask")
                        .HasColumnType("integer");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<bool>("VettingApprovalFlag")
                        .HasColumnType("boolean");

                    b.HasKey("CatalogCd");

                    b.HasIndex(new[] { "PrimaryMnemonic" }, "ix_primary_mnemonic");

                    b.ToTable("OrderCatalog");
                });

            modelBuilder.Entity("MVVM_play.Models.OrderCatalogSynonym", b =>
                {
                    b.Property<long>("SynonymId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SynonymId"));

                    b.Property<bool>("ActiveInd")
                        .HasColumnType("boolean");

                    b.Property<long>("ActiveStatusCd")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ActiveStatusDtTm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("ActiveStatusPrsnlId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ActivitySubtypeCd")
                        .HasColumnType("bigint");

                    b.Property<long?>("ActivityTypeCd")
                        .HasColumnType("bigint");

                    b.Property<short>("AuthorizationReviewFlag")
                        .HasColumnType("smallint");

                    b.Property<bool?>("AutoprogSynInd")
                        .HasColumnType("boolean");

                    b.Property<long>("CatalogCd")
                        .HasColumnType("bigint");

                    b.Property<long>("CatalogTypeCd")
                        .HasColumnType("bigint");

                    b.Property<string>("Cki")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<decimal?>("ConcentrationStrength")
                        .HasColumnType("numeric");

                    b.Property<long?>("ConcentrationStrengthUnitCd")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("ConcentrationVolume")
                        .HasColumnType("numeric");

                    b.Property<long?>("ConcentrationVolumeUnitCd")
                        .HasColumnType("bigint");

                    b.Property<string>("ConceptCki")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("CsIndexCd")
                        .HasColumnType("bigint");

                    b.Property<long>("DcpClinCatCd")
                        .HasColumnType("bigint");

                    b.Property<bool?>("DisplayAdditivesFirstInd")
                        .HasColumnType("boolean");

                    b.Property<bool?>("FilteredOdInd")
                        .HasColumnType("boolean");

                    b.Property<string>("HealthPlanView")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<short>("HideFlag")
                        .HasColumnType("smallint");

                    b.Property<bool?>("HighAlertInd")
                        .HasColumnType("boolean");

                    b.Property<long?>("HighAlertLongTextId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("HighAlertRequiredNtfyInd")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IgnoreHideConvertInd")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IngredientRateConversionInd")
                        .HasColumnType("boolean");

                    b.Property<long?>("InstId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IntermittentInd")
                        .HasColumnType("boolean");

                    b.Property<long?>("ItemId")
                        .HasColumnType("bigint");

                    b.Property<short?>("LastAdminDispBasisFlag")
                        .HasColumnType("smallint");

                    b.Property<bool?>("LockTargetDoseInd")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("MaxDoseCalcBsaValue")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("MaxFinalDose")
                        .HasColumnType("numeric");

                    b.Property<long?>("MaxFinalDoseUnitCd")
                        .HasColumnType("bigint");

                    b.Property<short>("MedIntervalWarnFlag")
                        .HasColumnType("smallint");

                    b.Property<string>("Mnemonic")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("MnemonicKeyCap")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("MnemonicKeyCapANls")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<string>("MnemonicKeyCapNls")
                        .IsRequired()
                        .HasMaxLength(405)
                        .HasColumnType("character varying(405)");

                    b.Property<long>("MnemonicTypeCd")
                        .HasColumnType("bigint");

                    b.Property<bool?>("MultipleOrdSentInd")
                        .HasColumnType("boolean");

                    b.Property<long>("OeFormatId")
                        .HasColumnType("bigint");

                    b.Property<long?>("OrderSentenceId")
                        .HasColumnType("bigint");

                    b.Property<short>("OrderableTypeFlag")
                        .HasColumnType("smallint");

                    b.Property<short?>("PreferredDoseFlag")
                        .HasColumnType("smallint");

                    b.Property<int?>("RefTextMask")
                        .HasColumnType("integer");

                    b.Property<long?>("RoundingRuleCd")
                        .HasColumnType("bigint");

                    b.Property<int?>("RxMask")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<string>("VirtualView")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<short?>("WitnessFlag")
                        .HasColumnType("smallint");

                    b.HasKey("SynonymId");

                    b.HasIndex("ActivityTypeCd", "MnemonicKeyCap");

                    b.HasIndex("CatalogTypeCd", "MnemonicKeyCap");

                    b.HasIndex("MnemonicKeyCap", "SynonymId");

                    b.HasIndex("CatalogCd", "MnemonicKeyCap", "ItemId");

                    b.HasIndex("MnemonicKeyCap", "MnemonicTypeCd", "CatalogTypeCd", "OrderableTypeFlag");

                    b.ToTable("OrderCatalogSynonym");
                });

            modelBuilder.Entity("MVVM_play.Models.OrderTask", b =>
                {
                    b.Property<long>("ReferenceTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ReferenceTaskId"));

                    b.Property<bool>("ActiveInd")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllPositionChartInd")
                        .HasColumnType("boolean");

                    b.Property<string>("AppObjectName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("CaptureBillInfoInd")
                        .HasColumnType("boolean");

                    b.Property<bool>("ChartNotDoneInd")
                        .HasColumnType("boolean");

                    b.Property<long?>("DcpFormRefId")
                        .HasColumnType("bigint");

                    b.Property<long?>("EventCd")
                        .HasColumnType("bigint");

                    b.Property<int>("GracePeriodMins")
                        .HasColumnType("integer");

                    b.Property<bool>("IgnoreFreqInd")
                        .HasColumnType("boolean");

                    b.Property<long?>("InstId")
                        .HasColumnType("bigint");

                    b.Property<int>("OverdueMins")
                        .HasColumnType("integer");

                    b.Property<long?>("ProcessLocationCd")
                        .HasColumnType("bigint");

                    b.Property<bool>("QuickChartDoneInd")
                        .HasColumnType("boolean");

                    b.Property<int>("RescheduleTime")
                        .HasColumnType("integer");

                    b.Property<int>("RetainTime")
                        .HasColumnType("integer");

                    b.Property<int>("RetainUnits")
                        .HasColumnType("integer");

                    b.Property<short?>("SystemUseTaskFlag")
                        .HasColumnType("smallint");

                    b.Property<long>("TaskActivityCd")
                        .HasColumnType("bigint");

                    b.Property<string>("TaskDescription")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("TaskDescriptionKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<long>("TaskTypeCd")
                        .HasColumnType("bigint");

                    b.Property<string>("TxnIdText")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("ReferenceTaskId");

                    b.HasIndex(new[] { "DcpFormRefId" }, "ix_dcp_form_ref_id");

                    b.HasIndex(new[] { "TaskTypeCd" }, "ix_task_type_cd");

                    b.ToTable("OrderTask");
                });

            modelBuilder.Entity("MVVM_play.Models.TaskActivity", b =>
                {
                    b.Property<long>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("TaskId"));

                    b.Property<bool>("ActiveInd")
                        .HasColumnType("boolean");

                    b.Property<long>("ActiveStatusCd")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ActiveStatusDtTm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("ActiveStatusPrsnlId")
                        .HasColumnType("bigint");

                    b.Property<string>("BroadcastMessageUuid")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("CallerContactTxt")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("CallerName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<long?>("CaresetId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CatalogCd")
                        .HasColumnType("bigint");

                    b.Property<long>("CatalogTypeCd")
                        .HasColumnType("bigint");

                    b.Property<long?>("ChartedByAgentCd")
                        .HasColumnType("bigint");

                    b.Property<string>("ChartedByAgentIdentifier")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ChartingContextReference")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Comments")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("ConfidentialInd")
                        .HasColumnType("boolean");

                    b.Property<long?>("ContainerId")
                        .HasColumnType("bigint");

                    b.Property<bool>("ContinuousInd")
                        .HasColumnType("boolean");

                    b.Property<long?>("ContributorSystemCd")
                        .HasColumnType("bigint");

                    b.Property<long?>("ConversationId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("DeliveryInd")
                        .HasColumnType("boolean");

                    b.Property<string>("EmailMessageIdent")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<long>("EncounterId")
                        .HasColumnType("bigint");

                    b.Property<long?>("EventCd")
                        .HasColumnType("bigint");

                    b.Property<long?>("EventClassCd")
                        .HasColumnType("bigint");

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<string>("ExternalReferenceNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<long?>("FormatCd")
                        .HasColumnType("bigint");

                    b.Property<long?>("IbRxReqPersonDemogId")
                        .HasColumnType("bigint");

                    b.Property<long?>("InstId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IvInd")
                        .HasColumnType("boolean");

                    b.Property<bool?>("LinkedOrderInd")
                        .HasColumnType("boolean");

                    b.Property<long?>("LocBedCd")
                        .HasColumnType("bigint");

                    b.Property<long?>("LocRoomCd")
                        .HasColumnType("bigint");

                    b.Property<long?>("LocationCd")
                        .HasColumnType("bigint");

                    b.Property<long?>("MedOrderTypeCd")
                        .HasColumnType("bigint");

                    b.Property<string>("MessageText")
                        .HasMaxLength(32000)
                        .HasColumnType("character varying(32000)");

                    b.Property<long?>("MsgSenderEmailInfoId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MsgSenderId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MsgSenderPersonId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MsgSenderPrsnlGroupId")
                        .HasColumnType("bigint");

                    b.Property<string>("MsgSubject")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<long?>("MsgSubjectCd")
                        .HasColumnType("bigint");

                    b.Property<long?>("MsgTextId")
                        .HasColumnType("bigint");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<long?>("OrigPoolTaskId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PerformedPrsnlId")
                        .HasColumnType("bigint");

                    b.Property<long>("PersonId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PftQueueItemWfHistId")
                        .HasColumnType("bigint");

                    b.Property<bool>("PhysicianOrderInd")
                        .HasColumnType("boolean");

                    b.Property<bool>("ReadInd")
                        .HasColumnType("boolean");

                    b.Property<long>("ReferenceTaskId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("RemindDtTm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("RescheduleInd")
                        .HasColumnType("boolean");

                    b.Property<long?>("RescheduleReasonCd")
                        .HasColumnType("bigint");

                    b.Property<long?>("ResponsiblePrsnlId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ResultSetId")
                        .HasColumnType("bigint");

                    b.Property<bool>("RoutineInd")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ScheduledDtTm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("SendEventValidFromDtTm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SourceTag")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("StatInd")
                        .HasColumnType("boolean");

                    b.Property<long?>("SuggestedEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("SuggestedEntityName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("TaskActivityCd")
                        .HasColumnType("bigint");

                    b.Property<long?>("TaskActivityClassCd")
                        .HasColumnType("bigint");

                    b.Property<long>("TaskClassCd")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("TaskCreatedDtTm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("TaskDtTm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("TaskPriorityCd")
                        .HasColumnType("bigint");

                    b.Property<long?>("TaskRoutingId")
                        .HasColumnType("bigint");

                    b.Property<long>("TaskStatusCd")
                        .HasColumnType("bigint");

                    b.Property<long?>("TaskStatusReasonCd")
                        .HasColumnType("bigint");

                    b.Property<long?>("TaskSubtypeCd")
                        .HasColumnType("bigint");

                    b.Property<long>("TaskTypeCd")
                        .HasColumnType("bigint");

                    b.Property<int?>("TaskTz")
                        .HasColumnType("integer");

                    b.Property<short?>("TemplateTaskFlag")
                        .HasColumnType("smallint");

                    b.Property<bool>("TpnInd")
                        .HasColumnType("boolean");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("TaskId");

                    b.HasIndex("TaskClassCd", "TaskStatusCd");

                    b.HasIndex("TaskTypeCd", "TaskStatusCd");

                    b.HasIndex("EncounterId", "TaskTypeCd", "TaskStatusCd");

                    b.HasIndex("TaskStatusCd", "TaskTypeCd", "TaskClassCd");

                    b.HasIndex("LocationCd", "TaskStatusCd", "TaskTypeCd", "TaskDtTm");

                    b.HasIndex("PersonId", "TaskTypeCd", "TaskStatusCd", "TaskDtTm", "TaskClassCd", "OrderId");

                    b.ToTable("TaskActivity");
                });

            modelBuilder.Entity("MVVM_play.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MVVM_play.Models.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<string>("PrimaryAddress")
                        .HasColumnType("text");

                    b.Property<string>("SecondaryAddress")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdateDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("MVVM_play.Models.UserProfileHx", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PrimaryAddress")
                        .HasColumnType("text");

                    b.Property<string>("SecondaryAddress")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdateDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserProfilesHx");
                });

            modelBuilder.Entity("MVVM_play.Models.UserProfile", b =>
                {
                    b.HasOne("MVVM_play.Models.User", "User")
                        .WithOne("UserProfile")
                        .HasForeignKey("MVVM_play.Models.UserProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MVVM_play.Models.UserProfileHx", b =>
                {
                    b.HasOne("MVVM_play.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MVVM_play.Models.User", b =>
                {
                    b.Navigation("UserProfile");
                });
#pragma warning restore 612, 618
        }
    }
}
